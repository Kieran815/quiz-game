{"version":3,"sources":["marvelVdc.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","app.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCardStyle","styled","div","ButtonStyle","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","QuizStyle","createGlobalStyle","mVdc","Wrapper","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","Normal","mode","setMode","startQuiz","newQuestions","length","Hard","undefined","result","e","currentTarget","answerObject","prev","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1946f250.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marvelVdc.3693f61d.jpg\";","// https://opentdb.com/api.php?amount=10&category=29\nimport { shuffleArray } from './utils';\n\n// establish `type` for all used variables so JS knows what data types to look for/interpret (i.e. string, number, array, boolean, any, null, etc)\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n}\n\n//\nexport type QuestionState = Question & { answers: string[] }\n\n// use `enum` to \nexport enum Difficulty {\n  Normal = 'medium',\n  Hard = 'hard'\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=29&difficulty=${difficulty}`;\n  const data = await (await fetch(endpoint)).json();\n\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer\n    ])\n  }));\n}","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\n\nexport const QuestionCardStyle = styled.div`\n  max-width: 90%;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\n  text-align: center;\n\n  p {\n    font-size: 2rem;\n\n  }\n`\n\n// creating responsive components using props\n\n// create `type` for component props being passed (ts)\ntype ButtonStyleProps = {\n  correct: boolean;\n  userClicked: boolean;\n}\n\n// pass the `type` object to the styled.div \nexport const ButtonStyle = styled.div<ButtonStyleProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.9;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 2rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    /* use ternary op to change styles based on boolean */\n    background: ${({ correct, userClicked}) => \n      correct\n      ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n      : !correct && userClicked\n      ? 'linear-gradient(90deg, #ff5656, #c16868)'\n      : 'linear-gradient(90deg, #56ccff, #6eafb4)'\n    };\n    border: 3px solid #000;\n    box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0,0,0,0.25)\n    }\n  }\n`","import React from \"react\";\nimport { AnswerObject } from '../App';\n\n// import styled components\nimport { QuestionCardStyle, ButtonStyle } from './QuestionCard.styles';\n\n// use typescript to establish props variable `types`\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNumber: number;\n  totalQuestions: number;\n}\n\n// use `React.FC` to tell TypeScript what type of component `QuesitionCard` is (Functional Component)...\n// then use `<>` to pass in the `Props` type object into the component\n// destructure `Props` object into component\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions\n}) => {\n  return (\n    <QuestionCardStyle>\n      <p className=\"number\">\n        Question: {questionNumber} / {totalQuestions}  \n      </p>\n      <p dangerouslySetInnerHTML={{ __html: question }} />\n      <div>\n        {answers.map(answer => (\n          <ButtonStyle\n            key={answer}\n            correct={userAnswer?.correctAnswer === answer}\n            userClicked={userAnswer?.answer === answer}\n          >\n            <button disabled={userAnswer ? true : false} value={answer} onClick={callback} >\n              <span dangerouslySetInnerHTML={{ __html:answer }} />\n            </button>\n          </ButtonStyle>\n        ))}\n      </div>\n    </QuestionCardStyle>\n  );\n}\n\nexport default QuestionCard;","import styled, { createGlobalStyle } from 'styled-components';\nimport mVdc from './marvelVdc.jpg';\n\n// use `createGlobalStyle` for global styling\nexport const  QuizStyle = createGlobalStyle`\n// set styles like you would in a css file\n  html {\n    height: 100%;\n    max-height: 100vh;\n    overflow-y: scroll;\n  }\n\n  body {\n    background-color: #000;\n    background-image: url(${mVdc});\n    background-size: 90%;\n    background-position: center;\n    background-repeat: no-repeat;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Dancing Script', sans-serif;\n  }\n`;\n\n// use `styled` to create styled components\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  > p {\n    color: #fff;\n    font-size: 4rem;\n  }\n\n  .setting {\n    display: flex;\n    justify-content: space-around;\n    color: #000;\n    font-size: 2rem;\n    margin: 0.25em;\n    padding: 0.15em;\n    max-width: 90%;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #000;\n    box-shadow: 0px 5px 10px rgba(255,0,255,0);\n    text-align: center;\n  }\n\n  h1 {\n    font-family: 'Baloo Da 2', sans-serif;\n    color: black;\n    border: 2px solid #000;\n    background-size: 100%;\n    -webkit-background-clip: text;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    font-weight: 400\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    margin-bottom: 0.1em;\n    background: #ebfeff;\n    border-radius: 10px;\n    padding: 20px;\n  }\n\n  .settings {\n    display: flex;\n    justify-content: space-around;\n    background: #ebfeff;\n    border-radius: 10px;\n    padding: 20px;\n  }\n\n  .start, .modeSelect, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    border: 2px solid #000;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start {\n    max-width: 200px;\n    background: linear-gradient(180deg, #56ffa4, #59bc86)\n  }\n  \n  .newGame {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    max-width: 90%;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #000;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\n    text-align: center;\n  }\n`;","import React, { useState } from 'react';\nimport { fetchQuizQuestions, QuestionState, Difficulty } from './API';\nimport QuestionCard from \"./components/QuestionCard\";\n// styles for styled components\nimport { QuizStyle, Wrapper } from './app.styles';\n\n// easy to modify\nconst TOTAL_QUESTIONS = 10;\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  // import `types` for state\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number , setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] =  useState(true);\n  // `mode` created to set difficulty\n  const [mode, setMode] = useState<Difficulty>(Difficulty.Normal);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    // pass values to function from `./API`;\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      mode\n    );\n\n    // resets game with 0 points, blank arrays, and new questions\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  //\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver) {\n      // save user answer\n      const answer = e.currentTarget.value;\n      // compare to correct answer\n      const correct = questions[number].correct_answer === answer;\n      if(correct) {\n        setScore(score + 1)\n      }\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      }\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  }\n\n  //\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if(nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n      <QuizStyle />\n      <Wrapper>\n        {/* Ternary Op to conditionally render `Start` button, `Score`, and `QuestionCard` */}\n        {gameOver ? <h1>Comics Quiz</h1> : null}\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ?\n          (\n            <div className='newGame'>\n              <h2>Select Difficulty</h2>\n              <sub>(for real, though, it's difficult...)</sub>               \n              <div className='settings'>\n                <button className='modeSelect' onClick={() => setMode(Difficulty.Normal)}>Normal</button>\n                <button className='modeSelect' onClick={() => setMode(Difficulty.Hard)}>Hard</button>\n              </div>\n              {mode !== undefined ? <button className='start' onClick={startQuiz}>Start</button> : \"Select Difficulty\"}\n            </div>\n          ) : \n          null\n        }\n        {gameOver && userAnswers.length === TOTAL_QUESTIONS ?\n          userAnswers.map(result => {\n            return(\n              <div>\n                <p>{result.question}</p>\n                <p>{result.answer}</p>\n                <p>{result.correctAnswer}</p>\n                <p>{result.correct}</p>\n              </div>\n            )\n          }):\n          null\n        })\n        \n        {!gameOver ? (\n          <div className='setting'>\n            <p>Difficulty: {mode === Difficulty.Normal ? 'Normal' : 'Hard'} <br/>Score: {score}</p>\n          </div>\n        ) : ''}\n        {loading ? <p>Loading Quiz</p> : ''}\n        {!loading && !gameOver ?\n          (<QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />)\n          : ''\n        }\n\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ?\n          <button\n            className=\"next\"\n            onClick={nextQuestion}\n          >\n            Next Question\n          </button>\n          : null          \n        }\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}